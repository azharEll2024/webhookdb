# frozen_string_literal: true

# Helper table so backfill jobs can take exclusive locks on a service integration.
# Otherwise we end up backfilling the same integration concurrently.
class Webhookdb::BackfillJob::ServiceIntegrationLock < Webhookdb::Postgres::Model(
  :backfill_job_service_integration_locks,
)

  many_to_one :service_integration, class: "Webhookdb::ServiceIntegration"
end

# Table: backfill_job_service_integration_locks
# -------------------------------------------------------------------------------------------------------------------------------------------------
# Columns:
#  id                     | integer | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  service_integration_id | integer | NOT NULL
# Indexes:
#  backfill_job_service_integration_locks_pkey                     | PRIMARY KEY btree (id)
#  backfill_job_service_integration_loc_service_integration_id_key | UNIQUE btree (service_integration_id)
# Foreign key constraints:
#  backfill_job_service_integration_lo_service_integration_id_fkey | (service_integration_id) REFERENCES service_integrations(id) ON DELETE CASCADE
# -------------------------------------------------------------------------------------------------------------------------------------------------
